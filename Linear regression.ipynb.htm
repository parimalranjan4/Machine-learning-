<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns:m="http://schemas.microsoft.com/office/2004/12/omml"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=us-ascii">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 12">
<meta name=Originator content="Microsoft Word 12">
<link rel=File-List href="Linear%20regression.ipynb_files/filelist.xml">
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>HP</o:Author>
  <o:Template>Normal</o:Template>
  <o:LastAuthor>HP</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>1</o:TotalTime>
  <o:Created>2021-05-09T00:49:00Z</o:Created>
  <o:LastSaved>2021-05-09T00:49:00Z</o:LastSaved>
  <o:Pages>4</o:Pages>
  <o:Words>18909</o:Words>
  <o:Characters>107782</o:Characters>
  <o:Lines>898</o:Lines>
  <o:Paragraphs>252</o:Paragraphs>
  <o:CharactersWithSpaces>126439</o:CharactersWithSpaces>
  <o:Version>12.00</o:Version>
 </o:DocumentProperties>
</xml><![endif]-->
<link rel=themeData href="Linear%20regression.ipynb_files/themedata.thmx">
<link rel=colorSchemeMapping
href="Linear%20regression.ipynb_files/colorschememapping.xml">
<!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:TrackMoves>false</w:TrackMoves>
  <w:TrackFormatting/>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:DoNotPromoteQF/>
  <w:LidThemeOther>EN-IN</w:LidThemeOther>
  <w:LidThemeAsian>X-NONE</w:LidThemeAsian>
  <w:LidThemeComplexScript>X-NONE</w:LidThemeComplexScript>
  <w:Compatibility>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
   <w:DontGrowAutofit/>
   <w:SplitPgBreakAndParaMark/>
   <w:DontVertAlignCellWithSp/>
   <w:DontBreakConstrainedForcedTables/>
   <w:DontVertAlignInTxbx/>
   <w:Word11KerningPairs/>
   <w:CachedColBalance/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
  <m:mathPr>
   <m:mathFont m:val="Cambria Math"/>
   <m:brkBin m:val="before"/>
   <m:brkBinSub m:val="--"/>
   <m:smallFrac m:val="off"/>
   <m:dispDef/>
   <m:lMargin m:val="0"/>
   <m:rMargin m:val="0"/>
   <m:defJc m:val="centerGroup"/>
   <m:wrapIndent m:val="1440"/>
   <m:intLim m:val="subSup"/>
   <m:naryLim m:val="undOvr"/>
  </m:mathPr></w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" DefUnhideWhenUsed="true"
  DefSemiHidden="true" DefQFormat="false" DefPriority="99"
  LatentStyleCount="267">
  <w:LsdException Locked="false" Priority="0" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="Normal"/>
  <w:LsdException Locked="false" Priority="9" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="heading 1"/>
  <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 2"/>
  <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 3"/>
  <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 4"/>
  <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 5"/>
  <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 6"/>
  <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 7"/>
  <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 8"/>
  <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 9"/>
  <w:LsdException Locked="false" Priority="39" Name="toc 1"/>
  <w:LsdException Locked="false" Priority="39" Name="toc 2"/>
  <w:LsdException Locked="false" Priority="39" Name="toc 3"/>
  <w:LsdException Locked="false" Priority="39" Name="toc 4"/>
  <w:LsdException Locked="false" Priority="39" Name="toc 5"/>
  <w:LsdException Locked="false" Priority="39" Name="toc 6"/>
  <w:LsdException Locked="false" Priority="39" Name="toc 7"/>
  <w:LsdException Locked="false" Priority="39" Name="toc 8"/>
  <w:LsdException Locked="false" Priority="39" Name="toc 9"/>
  <w:LsdException Locked="false" Priority="35" QFormat="true" Name="caption"/>
  <w:LsdException Locked="false" Priority="10" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="Title"/>
  <w:LsdException Locked="false" Priority="1" Name="Default Paragraph Font"/>
  <w:LsdException Locked="false" Priority="11" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="Subtitle"/>
  <w:LsdException Locked="false" Priority="22" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="Strong"/>
  <w:LsdException Locked="false" Priority="20" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="Emphasis"/>
  <w:LsdException Locked="false" Priority="59" SemiHidden="false"
   UnhideWhenUsed="false" Name="Table Grid"/>
  <w:LsdException Locked="false" UnhideWhenUsed="false" Name="Placeholder Text"/>
  <w:LsdException Locked="false" Priority="1" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="No Spacing"/>
  <w:LsdException Locked="false" Priority="60" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Shading"/>
  <w:LsdException Locked="false" Priority="61" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light List"/>
  <w:LsdException Locked="false" Priority="62" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Grid"/>
  <w:LsdException Locked="false" Priority="63" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 1"/>
  <w:LsdException Locked="false" Priority="64" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 2"/>
  <w:LsdException Locked="false" Priority="65" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 1"/>
  <w:LsdException Locked="false" Priority="66" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 2"/>
  <w:LsdException Locked="false" Priority="67" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 1"/>
  <w:LsdException Locked="false" Priority="68" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 2"/>
  <w:LsdException Locked="false" Priority="69" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 3"/>
  <w:LsdException Locked="false" Priority="70" SemiHidden="false"
   UnhideWhenUsed="false" Name="Dark List"/>
  <w:LsdException Locked="false" Priority="71" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Shading"/>
  <w:LsdException Locked="false" Priority="72" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful List"/>
  <w:LsdException Locked="false" Priority="73" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Grid"/>
  <w:LsdException Locked="false" Priority="60" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Shading Accent 1"/>
  <w:LsdException Locked="false" Priority="61" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light List Accent 1"/>
  <w:LsdException Locked="false" Priority="62" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Grid Accent 1"/>
  <w:LsdException Locked="false" Priority="63" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 1 Accent 1"/>
  <w:LsdException Locked="false" Priority="64" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 2 Accent 1"/>
  <w:LsdException Locked="false" Priority="65" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 1 Accent 1"/>
  <w:LsdException Locked="false" UnhideWhenUsed="false" Name="Revision"/>
  <w:LsdException Locked="false" Priority="34" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="List Paragraph"/>
  <w:LsdException Locked="false" Priority="29" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="Quote"/>
  <w:LsdException Locked="false" Priority="30" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="Intense Quote"/>
  <w:LsdException Locked="false" Priority="66" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 2 Accent 1"/>
  <w:LsdException Locked="false" Priority="67" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 1 Accent 1"/>
  <w:LsdException Locked="false" Priority="68" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 2 Accent 1"/>
  <w:LsdException Locked="false" Priority="69" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 3 Accent 1"/>
  <w:LsdException Locked="false" Priority="70" SemiHidden="false"
   UnhideWhenUsed="false" Name="Dark List Accent 1"/>
  <w:LsdException Locked="false" Priority="71" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Shading Accent 1"/>
  <w:LsdException Locked="false" Priority="72" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful List Accent 1"/>
  <w:LsdException Locked="false" Priority="73" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Grid Accent 1"/>
  <w:LsdException Locked="false" Priority="60" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Shading Accent 2"/>
  <w:LsdException Locked="false" Priority="61" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light List Accent 2"/>
  <w:LsdException Locked="false" Priority="62" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Grid Accent 2"/>
  <w:LsdException Locked="false" Priority="63" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 1 Accent 2"/>
  <w:LsdException Locked="false" Priority="64" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 2 Accent 2"/>
  <w:LsdException Locked="false" Priority="65" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 1 Accent 2"/>
  <w:LsdException Locked="false" Priority="66" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 2 Accent 2"/>
  <w:LsdException Locked="false" Priority="67" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 1 Accent 2"/>
  <w:LsdException Locked="false" Priority="68" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 2 Accent 2"/>
  <w:LsdException Locked="false" Priority="69" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 3 Accent 2"/>
  <w:LsdException Locked="false" Priority="70" SemiHidden="false"
   UnhideWhenUsed="false" Name="Dark List Accent 2"/>
  <w:LsdException Locked="false" Priority="71" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Shading Accent 2"/>
  <w:LsdException Locked="false" Priority="72" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful List Accent 2"/>
  <w:LsdException Locked="false" Priority="73" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Grid Accent 2"/>
  <w:LsdException Locked="false" Priority="60" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Shading Accent 3"/>
  <w:LsdException Locked="false" Priority="61" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light List Accent 3"/>
  <w:LsdException Locked="false" Priority="62" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Grid Accent 3"/>
  <w:LsdException Locked="false" Priority="63" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 1 Accent 3"/>
  <w:LsdException Locked="false" Priority="64" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 2 Accent 3"/>
  <w:LsdException Locked="false" Priority="65" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 1 Accent 3"/>
  <w:LsdException Locked="false" Priority="66" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 2 Accent 3"/>
  <w:LsdException Locked="false" Priority="67" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 1 Accent 3"/>
  <w:LsdException Locked="false" Priority="68" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 2 Accent 3"/>
  <w:LsdException Locked="false" Priority="69" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 3 Accent 3"/>
  <w:LsdException Locked="false" Priority="70" SemiHidden="false"
   UnhideWhenUsed="false" Name="Dark List Accent 3"/>
  <w:LsdException Locked="false" Priority="71" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Shading Accent 3"/>
  <w:LsdException Locked="false" Priority="72" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful List Accent 3"/>
  <w:LsdException Locked="false" Priority="73" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Grid Accent 3"/>
  <w:LsdException Locked="false" Priority="60" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Shading Accent 4"/>
  <w:LsdException Locked="false" Priority="61" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light List Accent 4"/>
  <w:LsdException Locked="false" Priority="62" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Grid Accent 4"/>
  <w:LsdException Locked="false" Priority="63" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 1 Accent 4"/>
  <w:LsdException Locked="false" Priority="64" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 2 Accent 4"/>
  <w:LsdException Locked="false" Priority="65" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 1 Accent 4"/>
  <w:LsdException Locked="false" Priority="66" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 2 Accent 4"/>
  <w:LsdException Locked="false" Priority="67" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 1 Accent 4"/>
  <w:LsdException Locked="false" Priority="68" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 2 Accent 4"/>
  <w:LsdException Locked="false" Priority="69" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 3 Accent 4"/>
  <w:LsdException Locked="false" Priority="70" SemiHidden="false"
   UnhideWhenUsed="false" Name="Dark List Accent 4"/>
  <w:LsdException Locked="false" Priority="71" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Shading Accent 4"/>
  <w:LsdException Locked="false" Priority="72" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful List Accent 4"/>
  <w:LsdException Locked="false" Priority="73" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Grid Accent 4"/>
  <w:LsdException Locked="false" Priority="60" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Shading Accent 5"/>
  <w:LsdException Locked="false" Priority="61" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light List Accent 5"/>
  <w:LsdException Locked="false" Priority="62" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Grid Accent 5"/>
  <w:LsdException Locked="false" Priority="63" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 1 Accent 5"/>
  <w:LsdException Locked="false" Priority="64" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 2 Accent 5"/>
  <w:LsdException Locked="false" Priority="65" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 1 Accent 5"/>
  <w:LsdException Locked="false" Priority="66" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 2 Accent 5"/>
  <w:LsdException Locked="false" Priority="67" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 1 Accent 5"/>
  <w:LsdException Locked="false" Priority="68" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 2 Accent 5"/>
  <w:LsdException Locked="false" Priority="69" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 3 Accent 5"/>
  <w:LsdException Locked="false" Priority="70" SemiHidden="false"
   UnhideWhenUsed="false" Name="Dark List Accent 5"/>
  <w:LsdException Locked="false" Priority="71" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Shading Accent 5"/>
  <w:LsdException Locked="false" Priority="72" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful List Accent 5"/>
  <w:LsdException Locked="false" Priority="73" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Grid Accent 5"/>
  <w:LsdException Locked="false" Priority="60" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Shading Accent 6"/>
  <w:LsdException Locked="false" Priority="61" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light List Accent 6"/>
  <w:LsdException Locked="false" Priority="62" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Grid Accent 6"/>
  <w:LsdException Locked="false" Priority="63" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 1 Accent 6"/>
  <w:LsdException Locked="false" Priority="64" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 2 Accent 6"/>
  <w:LsdException Locked="false" Priority="65" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 1 Accent 6"/>
  <w:LsdException Locked="false" Priority="66" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 2 Accent 6"/>
  <w:LsdException Locked="false" Priority="67" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 1 Accent 6"/>
  <w:LsdException Locked="false" Priority="68" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 2 Accent 6"/>
  <w:LsdException Locked="false" Priority="69" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 3 Accent 6"/>
  <w:LsdException Locked="false" Priority="70" SemiHidden="false"
   UnhideWhenUsed="false" Name="Dark List Accent 6"/>
  <w:LsdException Locked="false" Priority="71" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Shading Accent 6"/>
  <w:LsdException Locked="false" Priority="72" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful List Accent 6"/>
  <w:LsdException Locked="false" Priority="73" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Grid Accent 6"/>
  <w:LsdException Locked="false" Priority="19" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="Subtle Emphasis"/>
  <w:LsdException Locked="false" Priority="21" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="Intense Emphasis"/>
  <w:LsdException Locked="false" Priority="31" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="Subtle Reference"/>
  <w:LsdException Locked="false" Priority="32" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="Intense Reference"/>
  <w:LsdException Locked="false" Priority="33" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="Book Title"/>
  <w:LsdException Locked="false" Priority="37" Name="Bibliography"/>
  <w:LsdException Locked="false" Priority="39" QFormat="true" Name="TOC Heading"/>
 </w:LatentStyles>
</xml><![endif]-->
<style scoped>
<!--
\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }
\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }
\n\n    .dataframe thead th {\n        text-align: right;\n    }
\n</style>\n<table border=\"1\" class=\"dataframe\">\n  
\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }
\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }
\n\n    .dataframe thead th {\n        text-align: right;\n    }
\n</style>\n<table border=\"1\" class=\"dataframe\">\n  
\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }
\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }
\n\n    .dataframe thead th {\n        text-align: right;\n    }
\n</style>\n<table border=\"1\" class=\"dataframe\">\n  
\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }
\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }
\n\n    .dataframe thead th {\n        text-align: right;\n    }
\n</style>\n<table border=\"1\" class=\"dataframe\">\n  

 /* Font Definitions */
 @font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;
	mso-font-charset:1;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:0 0 0 0 0 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-unhide:no;
	mso-style-qformat:yes;
	mso-style-parent:"";
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";
	mso-fareast-font-family:"Times New Roman";
	mso-fareast-theme-font:minor-fareast;}
.MsoChpDefault
	{mso-style-type:export-only;
	mso-default-props:yes;
	font-size:10.0pt;
	mso-ansi-font-size:10.0pt;
	mso-bidi-font-size:10.0pt;}
@page Section1
	{size:595.3pt 841.9pt;
	margin:72.0pt 72.0pt 72.0pt 72.0pt;
	mso-header-margin:35.4pt;
	mso-footer-margin:35.4pt;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style>
<!--[if gte mso 10]>
<style scoped>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-priority:99;
	mso-style-qformat:yes;
	mso-style-parent:"";
	mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
	mso-para-margin:0cm;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman","serif";}
</style>
<![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="2050"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]-->
</head>

<body lang=EN-IN style='tab-interval:36.0pt'>

<div class=Section1>

<p class=MsoNormal><span style='mso-fareast-font-family:"Times New Roman"'>{&quot;cells&quot;:[{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;#
importing the libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn
import metrics\nimport matplotlib.pyplot as plt\nimport seaborn as
sns\n%matplotlib inline&quot;,&quot;execution_count&quot;:7,&quot;outputs&quot;:[]},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;!conda
install -c anaconda seaborn
-y\n&quot;,&quot;execution_count&quot;:8,&quot;outputs&quot;:[{&quot;output_type&quot;:&quot;stream&quot;,&quot;text&quot;:&quot;Collecting
package metadata (current_repodata.json): done\nSolving environment:
done\n\n\n==&gt; WARNING: A newer version of conda exists. &lt;==\n current
version: 4.9.2\n latest version: 4.10.1\n\nPlease update conda by running\n\n $
conda update -n base conda\n\n\n\n# All requested packages already
installed.\n\n&quot;,&quot;name&quot;:&quot;stdout&quot;}]},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;#
Importing the Boston Housing dataset\nfrom sklearn.datasets import
load_boston\nboston = load_boston()&quot;,&quot;execution_count&quot;:9,&quot;outputs&quot;:[]},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;#Initializing
the dataframe \ndata =
pd.DataFrame(boston.data)&quot;,&quot;execution_count&quot;:10,&quot;outputs&quot;:[]},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;#sea
head of the
dataset\ndata.head()&quot;,&quot;execution_count&quot;:11,&quot;outputs&quot;:[{&quot;output_type&quot;:&quot;execute_result&quot;,&quot;execution_count&quot;:11,&quot;data&quot;:{&quot;text/plain&quot;:&quot;
0 1 2 3 4 5 6 7 8 9 10 \\\n0 0.00632 18.0 2.31 0.0 0.538 6.575 65.2 4.0900 1.0
296.0 15.3 \n1 0.02731 0.0 7.07 0.0 0.469 6.421 78.9 4.9671 2.0 242.0 17.8 \n2
0.02729 0.0 7.07 0.0 0.469 7.185 61.1 4.9671 2.0 242.0 17.8 \n3 0.03237 0.0
2.18 0.0 0.458 6.998 45.8 6.0622 3.0 222.0 18.7 \n4 0.06905 0.0 2.18 0.0 0.458
7.147 54.2 6.0622 3.0 222.0 18.7 \n\n 11 12 \n0 396.90 4.98 \n1 396.90 9.14 \n2
392.83 4.03 \n3 394.63 2.94 \n4 396.90 5.33 &quot;,&quot;text/html&quot;:&quot;<o:p></o:p></span></p>

<div>

<p class=MsoNormal><span style='mso-fareast-font-family:"Times New Roman"'>\n\n
\n \n 0\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n 10\n 11\n 12\n \n \n \n \n 0\n
0.00632\n 18.0\n 2.31\n 0.0\n 0.538\n 6.575\n 65.2\n 4.0900\n 1.0\n 296.0\n
15.3\n 396.90\n 4.98\n \n \n 1\n 0.02731\n 0.0\n 7.07\n 0.0\n 0.469\n 6.421\n
78.9\n 4.9671\n 2.0\n 242.0\n 17.8\n 396.90\n 9.14\n \n \n 2\n 0.02729\n 0.0\n
7.07\n 0.0\n 0.469\n 7.185\n 61.1\n 4.9671\n 2.0\n 242.0\n 17.8\n 392.83\n
4.03\n \n \n 3\n 0.03237\n 0.0\n 2.18\n 0.0\n 0.458\n 6.998\n 45.8\n 6.0622\n
3.0\n 222.0\n 18.7\n 394.63\n 2.94\n \n \n 4\n 0.06905\n 0.0\n 2.18\n 0.0\n
0.458\n 7.147\n 54.2\n 6.0622\n 3.0\n 222.0\n 18.7\n 396.90\n 5.33\n \n \n\n<o:p></o:p></span></p>

</div>

<p class=MsoNormal><span style='mso-fareast-font-family:"Times New Roman"'>&quot;},&quot;metadata&quot;:{}}]},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;#
Adding the features to the Dataframe\ndata.columns = boston.feature_names\ndata.head()&quot;,&quot;execution_count&quot;:12,&quot;outputs&quot;:[{&quot;output_type&quot;:&quot;execute_result&quot;,&quot;execution_count&quot;:12,&quot;data&quot;:{&quot;text/plain&quot;:&quot;
CRIM ZN INDUS CHAS NOX RM AGE DIS RAD TAX \\\n0 0.00632 18.0 2.31 0.0 0.538
6.575 65.2 4.0900 1.0 296.0 \n1 0.02731 0.0 7.07 0.0 0.469 6.421 78.9 4.9671
2.0 242.0 \n2 0.02729 0.0 7.07 0.0 0.469 7.185 61.1 4.9671 2.0 242.0 \n3
0.03237 0.0 2.18 0.0 0.458 6.998 45.8 6.0622 3.0 222.0 \n4 0.06905 0.0 2.18 0.0
0.458 7.147 54.2 6.0622 3.0 222.0 \n\n PTRATIO B LSTAT \n0 15.3 396.90 4.98 \n1
17.8 396.90 9.14 \n2 17.8 392.83 4.03 \n3 18.7 394.63 2.94 \n4 18.7 396.90 5.33
&quot;,&quot;text/html&quot;:&quot;<o:p></o:p></span></p>

<div>

<p class=MsoNormal><span style='mso-fareast-font-family:"Times New Roman"'>\n\n
\n \n CRIM\n ZN\n INDUS\n CHAS\n NOX\n RM\n AGE\n DIS\n RAD\n TAX\n PTRATIO\n
B\n LSTAT\n \n \n \n \n 0\n 0.00632\n 18.0\n 2.31\n 0.0\n 0.538\n 6.575\n
65.2\n 4.0900\n 1.0\n 296.0\n 15.3\n 396.90\n 4.98\n \n \n 1\n 0.02731\n 0.0\n
7.07\n 0.0\n 0.469\n 6.421\n 78.9\n 4.9671\n 2.0\n 242.0\n 17.8\n 396.90\n
9.14\n \n \n 2\n 0.02729\n 0.0\n 7.07\n 0.0\n 0.469\n 7.185\n 61.1\n 4.9671\n
2.0\n 242.0\n 17.8\n 392.83\n 4.03\n \n \n 3\n 0.03237\n 0.0\n 2.18\n 0.0\n
0.458\n 6.998\n 45.8\n 6.0622\n 3.0\n 222.0\n 18.7\n 394.63\n 2.94\n \n \n 4\n
0.06905\n 0.0\n 2.18\n 0.0\n 0.458\n 7.147\n 54.2\n 6.0622\n 3.0\n 222.0\n
18.7\n 396.90\n 5.33\n \n \n\n<o:p></o:p></span></p>

</div>

<p class=MsoNormal><span style='mso-fareast-font-family:"Times New Roman"'>&quot;},&quot;metadata&quot;:{}}]},{&quot;metadata&quot;:{},&quot;cell_type&quot;:&quot;markdown&quot;,&quot;source&quot;:&quot;
# Description of Symbols\n \n CRIM per capita crime rate by town\\\n ZN
proportion of residential land zoned for lots over 25000\\\n INDUS proportion
of non -retail business acres per town\\\n CHAS Charles River dummy Variable(
=1 if tract bounds river;0 otherwise\\\n NOX nitric oxide concentration (parts
per 10 million)\\\n RM average number of rooms per dwelling\\\n RAD index of
accessibility to radial highways\\\n TAX full -value property-tax rate per
10,000 USD\\\n PTRATIO pupil-teacher ratio by town\\\n B1000(Bk-0.63)^2 where
Bk is proportion of blacks by town\\\n LSTAT %lower status of population\\\n \n
\n \n \n \n \n
&quot;},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;#Adding
target variable to dataframe\ndata['Price'] = boston.target\n#Median value of
owner-occupied homes in
$1000usd\n&quot;,&quot;execution_count&quot;:13,&quot;outputs&quot;:[]},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;data.shape&quot;,&quot;execution_count&quot;:14,&quot;outputs&quot;:[{&quot;output_type&quot;:&quot;execute_result&quot;,&quot;execution_count&quot;:14,&quot;data&quot;:{&quot;text/plain&quot;:&quot;(506,
14)&quot;},&quot;metadata&quot;:{}}]},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;data.columns&quot;,&quot;execution_count&quot;:15,&quot;outputs&quot;:[{&quot;output_type&quot;:&quot;execute_result&quot;,&quot;execution_count&quot;:15,&quot;data&quot;:{&quot;text/plain&quot;:&quot;Index(['CRIM',
'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX',\n 'PTRATIO',
'B', 'LSTAT', 'Price'],\n
dtype='object')&quot;},&quot;metadata&quot;:{}}]},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;data.dtypes&quot;,&quot;execution_count&quot;:16,&quot;outputs&quot;:[{&quot;output_type&quot;:&quot;execute_result&quot;,&quot;execution_count&quot;:16,&quot;data&quot;:{&quot;text/plain&quot;:&quot;CRIM
float64\nZN float64\nINDUS float64\nCHAS float64\nNOX float64\nRM float64\nAGE
float64\nDIS float64\nRAD float64\nTAX float64\nPTRATIO float64\nB
float64\nLSTAT float64\nPrice float64\ndtype:
object&quot;},&quot;metadata&quot;:{}}]},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;#
Identifying the unique number of values in a
dataset\ndata.nunique()&quot;,&quot;execution_count&quot;:17,&quot;outputs&quot;:[{&quot;output_type&quot;:&quot;execute_result&quot;,&quot;execution_count&quot;:17,&quot;data&quot;:{&quot;text/plain&quot;:&quot;CRIM
504\nZN 26\nINDUS 76\nCHAS 2\nNOX 81\nRM 446\nAGE 356\nDIS 412\nRAD 9\nTAX
66\nPTRATIO 46\nB 357\nLSTAT 455\nPrice 229\ndtype:
int64&quot;},&quot;metadata&quot;:{}}]},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;#Check
for any missing value\ndata.isnull().sum()&quot;,&quot;execution_count&quot;:18,&quot;outputs&quot;:[{&quot;output_type&quot;:&quot;execute_result&quot;,&quot;execution_count&quot;:18,&quot;data&quot;:{&quot;text/plain&quot;:&quot;CRIM
0\nZN 0\nINDUS 0\nCHAS 0\nNOX 0\nRM 0\nAGE 0\nDIS 0\nRAD 0\nTAX 0\nPTRATIO 0\nB
0\nLSTAT 0\nPrice 0\ndtype: int64&quot;},&quot;metadata&quot;:{}}]},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;#
Viewing the data
statistics\ndata.describe()&quot;,&quot;execution_count&quot;:19,&quot;outputs&quot;:[{&quot;output_type&quot;:&quot;execute_result&quot;,&quot;execution_count&quot;:19,&quot;data&quot;:{&quot;text/plain&quot;:&quot;
CRIM ZN INDUS CHAS NOX RM \\\ncount 506.000000 506.000000 506.000000 506.000000
506.000000 506.000000 \nmean 3.613524 11.363636 11.136779 0.069170 0.554695
6.284634 \nstd 8.601545 23.322453 6.860353 0.253994 0.115878 0.702617 \nmin
0.006320 0.000000 0.460000 0.000000 0.385000 3.561000 \n25% 0.082045 0.000000
5.190000 0.000000 0.449000 5.885500 \n50% 0.256510 0.000000 9.690000 0.000000
0.538000 6.208500 \n75% 3.677083 12.500000 18.100000 0.000000 0.624000 6.623500
\nmax 88.976200 100.000000 27.740000 1.000000 0.871000 8.780000 \n\n AGE DIS
RAD TAX PTRATIO B \\\ncount 506.000000 506.000000 506.000000 506.000000
506.000000 506.000000 \nmean 68.574901 3.795043 9.549407 408.237154 18.455534
356.674032 \nstd 28.148861 2.105710 8.707259 168.537116 2.164946 91.294864
\nmin 2.900000 1.129600 1.000000 187.000000 12.600000 0.320000 \n25% 45.025000
2.100175 4.000000 279.000000 17.400000 375.377500 \n50% 77.500000 3.207450
5.000000 330.000000 19.050000 391.440000 \n75% 94.075000 5.188425 24.000000
666.000000 20.200000 396.225000 \nmax 100.000000 12.126500 24.000000 711.000000
22.000000 396.900000 \n\n LSTAT Price \ncount 506.000000 506.000000 \nmean
12.653063 22.532806 \nstd 7.141062 9.197104 \nmin 1.730000 5.000000 \n25%
6.950000 17.025000 \n50% 11.360000 21.200000 \n75% 16.955000 25.000000 \nmax
37.970000 50.000000 &quot;,&quot;text/html&quot;:&quot;<o:p></o:p></span></p>

<div>

<p class=MsoNormal><span style='mso-fareast-font-family:"Times New Roman"'>\n\n
\n \n CRIM\n ZN\n INDUS\n CHAS\n NOX\n RM\n AGE\n DIS\n RAD\n TAX\n PTRATIO\n
B\n LSTAT\n Price\n \n \n \n \n count\n 506.000000\n 506.000000\n 506.000000\n
506.000000\n 506.000000\n 506.000000\n 506.000000\n 506.000000\n 506.000000\n
506.000000\n 506.000000\n 506.000000\n 506.000000\n 506.000000\n \n \n mean\n
3.613524\n 11.363636\n 11.136779\n 0.069170\n 0.554695\n 6.284634\n 68.574901\n
3.795043\n 9.549407\n 408.237154\n 18.455534\n 356.674032\n 12.653063\n 22.532806\n
\n \n std\n 8.601545\n 23.322453\n 6.860353\n 0.253994\n 0.115878\n 0.702617\n
28.148861\n 2.105710\n 8.707259\n 168.537116\n 2.164946\n 91.294864\n
7.141062\n 9.197104\n \n \n min\n 0.006320\n 0.000000\n 0.460000\n 0.000000\n
0.385000\n 3.561000\n 2.900000\n 1.129600\n 1.000000\n 187.000000\n 12.600000\n
0.320000\n 1.730000\n 5.000000\n \n \n 25%\n 0.082045\n 0.000000\n 5.190000\n
0.000000\n 0.449000\n 5.885500\n 45.025000\n 2.100175\n 4.000000\n 279.000000\n
17.400000\n 375.377500\n 6.950000\n 17.025000\n \n \n 50%\n 0.256510\n
0.000000\n 9.690000\n 0.000000\n 0.538000\n 6.208500\n 77.500000\n 3.207450\n
5.000000\n 330.000000\n 19.050000\n 391.440000\n 11.360000\n 21.200000\n \n \n
75%\n 3.677083\n 12.500000\n 18.100000\n 0.000000\n 0.624000\n 6.623500\n
94.075000\n 5.188425\n 24.000000\n 666.000000\n 20.200000\n 396.225000\n
16.955000\n 25.000000\n \n \n max\n 88.976200\n 100.000000\n 27.740000\n
1.000000\n 0.871000\n 8.780000\n 100.000000\n 12.126500\n 24.000000\n
711.000000\n 22.000000\n 396.900000\n 37.970000\n 50.000000\n \n \n\n<o:p></o:p></span></p>

</div>

<p class=MsoNormal><span style='mso-fareast-font-family:"Times New Roman"'>&quot;},&quot;metadata&quot;:{}}]},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;corr
=
data.corr()\ncorr.shape\n\n&quot;,&quot;execution_count&quot;:20,&quot;outputs&quot;:[{&quot;output_type&quot;:&quot;execute_result&quot;,&quot;execution_count&quot;:20,&quot;data&quot;:{&quot;text/plain&quot;:&quot;(14,
14)&quot;},&quot;metadata&quot;:{}}]},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;#splitting
target variable and independent variables\nX = data.drop(['Price'],axis = 1)\ny
=
data['Price']&quot;,&quot;execution_count&quot;:21,&quot;outputs&quot;:[]},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;#
splitting to training and testing set\nfrom sklearn.model_selection import
train_test_split\nX_train,X_test,y_train , y_test = train_test_split(X, y,
test_size = 0.3 , random_state = 4 )&quot;,&quot;execution_count&quot;:22,&quot;outputs&quot;:[]},{&quot;metadata&quot;:{},&quot;cell_type&quot;:&quot;markdown&quot;,&quot;source&quot;:&quot;#
Linear regression\n## Training the
model&quot;},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;#
Import library for linear regression\nfrom sklearn.linear_model import
LinearRegression\n#create a linear regressor\nlm = LinearRegression()\n#Train
the linear regression model\nlm.fit(X_train ,
y_train)&quot;,&quot;execution_count&quot;:23,&quot;outputs&quot;:[{&quot;output_type&quot;:&quot;execute_result&quot;,&quot;execution_count&quot;:23,&quot;data&quot;:{&quot;text/plain&quot;:&quot;LinearRegression()&quot;},&quot;metadata&quot;:{}}]},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;#Value
of y
intercept\nlm.intercept_&quot;,&quot;execution_count&quot;:24,&quot;outputs&quot;:[{&quot;output_type&quot;:&quot;execute_result&quot;,&quot;execution_count&quot;:24,&quot;data&quot;:{&quot;text/plain&quot;:&quot;36.35704137659508&quot;},&quot;metadata&quot;:{}}]},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;#Converting
the coefficient values to Dataframe\nCoefficient =
pd.DataFrame([X_train.columns,lm.coef_]).T\nCoefficient =
Coefficient.rename(columns={0:'Attribute',1:'Coefficient'})\nCoefficient&quot;,&quot;execution_count&quot;:25,&quot;outputs&quot;:[{&quot;output_type&quot;:&quot;execute_result&quot;,&quot;execution_count&quot;:25,&quot;data&quot;:{&quot;text/plain&quot;:&quot;
Attribute Coefficient\n0 CRIM -0.12257\n1 ZN 0.0556777\n2 INDUS -0.00883428\n3
CHAS 4.69345\n4 NOX -14.4358\n5 RM 3.28008\n6 AGE -0.00344778\n7 DIS
-1.55214\n8 RAD 0.32625\n9 TAX -0.0140666\n10 PTRATIO -0.803275\n11 B
0.00935369\n12 LSTAT -0.523478&quot;,&quot;text/html&quot;:&quot;<o:p></o:p></span></p>

<div>

<p class=MsoNormal><span style='mso-fareast-font-family:"Times New Roman"'>\n\n
\n \n Attribute\n Coefficient\n \n \n \n \n 0\n CRIM\n -0.12257\n \n \n 1\n
ZN\n 0.0556777\n \n \n 2\n INDUS\n -0.00883428\n \n \n 3\n CHAS\n 4.69345\n \n
\n 4\n NOX\n -14.4358\n \n \n 5\n RM\n 3.28008\n \n \n 6\n AGE\n -0.00344778\n
\n \n 7\n DIS\n -1.55214\n \n \n 8\n RAD\n 0.32625\n \n \n 9\n TAX\n
-0.0140666\n \n \n 10\n PTRATIO\n -0.803275\n \n \n 11\n B\n 0.00935369\n \n \n
12\n LSTAT\n -0.523478\n \n \n\n<o:p></o:p></span></p>

</div>

<p class=MsoNormal><span style='mso-fareast-font-family:"Times New Roman"'>&quot;},&quot;metadata&quot;:{}}]},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;#
Model prediction\ny_pred =
lm.predict(X_train)&quot;,&quot;execution_count&quot;:29,&quot;outputs&quot;:[]},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;import
sklearn.metrics as metrics&quot;,&quot;execution_count&quot;:27,&quot;outputs&quot;:[]},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;#Performance
of
model\nprint('R^2:',metrics.r2_score(y_train,y_pred))\nprint('MAE:',metrics.mean_absolute_error(y_train,y_pred))\nprint('MSE:',metrics.mean_squared_error(y_train,y_pred))\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(y_train,y_pred)))&quot;,&quot;execution_count&quot;:33,&quot;outputs&quot;:[{&quot;output_type&quot;:&quot;stream&quot;,&quot;text&quot;:&quot;R^2:
0.7465991966746854\nMAE: 3.0898610949711305\nMSE: 19.073688703469035\nRMSE:
4.367343437774162\n&quot;,&quot;name&quot;:&quot;stdout&quot;}]},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;#Visualizing
the difference between actual and predicted
prices\nplt.scatter(y_train,y_pred)\nplt.xlabel(\&quot;Prices\&quot;)\nplt.ylabel(\&quot;Predicted
prices\&quot;)\nplt.title(\&quot;Prices vs Predicted
prices\&quot;)\nplt.show()\n\n&quot;,&quot;execution_count&quot;:34,&quot;outputs&quot;:[{&quot;output_type&quot;:&quot;display_data&quot;,&quot;data&quot;:{&quot;text/plain&quot;:&quot;<Figure size 432x288 with 1 Axes>&quot;,&quot;image/png&quot;:&quot;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\n&quot;},&quot;metadata&quot;:{&quot;needs_background&quot;:&quot;light&quot;}}]},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;#Checking
residuals\nplt.scatter(y_pred,y_train - y_pred)\nplt.title('Predicted vs
residuals')\nplt.xlabel('Predicted')\nplt.ylabel('Residuals')\nplt.show()&quot;,&quot;execution_count&quot;:35,&quot;outputs&quot;:[{&quot;output_type&quot;:&quot;display_data&quot;,&quot;data&quot;:{&quot;text/plain&quot;:&quot;<Figure size 432x288 with 1 Axes>&quot;,&quot;image/png&quot;:&quot;\n&quot;},&quot;metadata&quot;:{&quot;needs_background&quot;:&quot;light&quot;}}]},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;sns.distplot(y_train
- y_pred)\nplt.title('Histogram of
residuals')\nplt.xlabel('Residuals')\nplt.ylabel('Frequency')\nplt.show()&quot;,&quot;execution_count&quot;:36,&quot;outputs&quot;:[{&quot;output_type&quot;:&quot;stream&quot;,&quot;text&quot;:&quot;/srv/conda/envs/notebook/lib/python3.6/site-packages/seaborn/distributions.py:2551:
FutureWarning: `distplot` is a deprecated function and will be removed in a
future version. Please adapt your code to use either `displot` (a figure-level
function with similar flexibility) or `histplot` (an axes-level function for
histograms).\n warnings.warn(msg,
FutureWarning)\n&quot;,&quot;name&quot;:&quot;stderr&quot;},{&quot;output_type&quot;:&quot;display_data&quot;,&quot;data&quot;:{&quot;text/plain&quot;:&quot;<Figure size 432x288 with 1 Axes>&quot;,&quot;image/png&quot;:&quot;\n&quot;},&quot;metadata&quot;:{&quot;needs_background&quot;:&quot;light&quot;}}]},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;#Predicting
Test data with this model\ny_test_pred =
lm.predict(X_test)\ny_test_pred&quot;,&quot;execution_count&quot;:39,&quot;outputs&quot;:[{&quot;output_type&quot;:&quot;execute_result&quot;,&quot;execution_count&quot;:39,&quot;data&quot;:{&quot;text/plain&quot;:&quot;array([11.07380893,
26.47910329, 17.34489869, 19.1948608 , 36.36170735,\n 24.77095832, 31.00051311,
19.94226881, 19.22375105, 24.42998435,\n 28.31512637, 28.40796034, 19.27427968,
33.82295207, 21.28596487,\n 15.11171444, 20.97688767, 11.28556596, 11.8611348 ,
13.88444387,\n 5.37422679, 17.55278177, 20.58171204, 22.59849951,
16.07544265,\n 20.45924503, 19.1068775 , 14.37832191, 21.23235601,
17.52186564,\n 14.40725559, 23.68483414, 33.7410661 , 22.02733357,
17.62139147,\n 19.97241153, 30.24069397, 34.69718954, 23.85821534,
24.30715093,\n 36.13378112, 31.97532293, 19.626175 , 31.61097971,
34.58127809,\n 25.62718797, 39.95041812, 17.60880538, 19.90319708,
23.40417501,\n 33.70182396, 25.62491083, 18.25559302, 27.27317174,
13.46377871,\n 23.43470656, 24.43721849, 33.52056736, 16.99896935,
37.94464404,\n 15.94567818, 19.32528916, 31.84088262, 15.25081303,
38.40344789,\n 27.45372884, 34.36154312, 9.37353936, 19.42580066,
21.99218459,\n 22.79983394, 22.50810313, 22.30918714, 27.84395887,
16.40818345,\n 22.55507669, 16.5147332 , 25.11106836, 13.76991927,
19.78656399,\n 22.10247463, 20.26663237, 28.15165586, 19.52050766, 30.33254364,\n
22.79109999, 29.2663436 , 19.43113706, 24.7968264 , 37.46275648,\n 31.05503576,
41.3372879 , 18.46365381, 36.67964528, 19.40842405,\n 23.61810063, 27.93475362,
24.41825213, 9.4599059 , 20.68088677,\n 8.99426788, 28.4492398 , 31.88237066,
14.04302958, 24.8347909 ,\n 19.94124425, 36.90271393, 31.06556982, 33.91883403,
28.64591536,\n 31.1007263 , 22.82363163, 11.58125942, 29.46902405,
37.06066106,\n 23.01945872, 41.79865192, 18.44334162, 3.433324 , 18.57485663,\n
22.21257489, 16.71192648, 28.00473344, 28.42374739, 19.6417452 ,\n 18.76090758,
35.37631447, 13.12349548, 14.73923539, 18.16202333,\n 38.26604753, 15.97821613,
41.91544265, 30.44631625, 28.65848089,\n 24.19590457, 12.06559683, 26.01408744,
23.25012698, 18.92506857,\n 17.05016777, 17.50245392, 20.89247338, 24.62630514,
1.82167558,\n 23.03969555, 19.35693345, 17.89193065, 38.43943954, 19.7075262
,\n 31.67181183, 19.0130913
])&quot;},&quot;metadata&quot;:{}}]},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;#
Model Evaluation\nacc_linreg = metrics.r2_score(y_test
,y_test_pred)\nprint('R^2:' ,
acc_linreg)\nprint('R^2:',metrics.r2_score(y_test,y_test_pred))\nprint('MAE:',metrics.mean_absolute_error(y_test,y_test_pred))\nprint('MSE:',metrics.mean_squared_error(y_test,y_test_pred))\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(y_test,y_test_pred)))\n&quot;,&quot;execution_count&quot;:43,&quot;outputs&quot;:[{&quot;output_type&quot;:&quot;stream&quot;,&quot;text&quot;:&quot;R^2:
0.7121818377409193\nR^2: 0.7121818377409193\nMAE: 3.859005592370744\nMSE: 30.05399330712416\nRMSE:
5.482152251362977\n&quot;,&quot;name&quot;:&quot;stdout&quot;}]},{&quot;metadata&quot;:{},&quot;cell_type&quot;:&quot;markdown&quot;,&quot;source&quot;:&quot;#
Random Forest regressor\n## Train the
model&quot;},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;#
Import Random Forest Regressor\nfrom sklearn.ensemble import
RandomForestRegressor\n\n#Create a random forest regressor\nreg =
RandomForestRegressor()\n\n#Train the model using the training
sets\nreg.fit(X_train ,
y_train)\n&quot;,&quot;execution_count&quot;:44,&quot;outputs&quot;:[{&quot;output_type&quot;:&quot;execute_result&quot;,&quot;execution_count&quot;:44,&quot;data&quot;:{&quot;text/plain&quot;:&quot;RandomForestRegressor()&quot;},&quot;metadata&quot;:{}}]},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;#
Model prediction on train data\ny_pred =
reg.predict(X_train)\ny_pred&quot;,&quot;execution_count&quot;:45,&quot;outputs&quot;:[{&quot;output_type&quot;:&quot;execute_result&quot;,&quot;execution_count&quot;:45,&quot;data&quot;:{&quot;text/plain&quot;:&quot;array([23.391,
18.799, 20.27 , 13.933, 47.701, 21.817, 48.206, 13.998,\n 20.531, 49.233,
34.598, 9.839, 15.442, 22.21 , 24.492, 24.911,\n 18.167, 45.254, 22.903,
20.813, 18.541, 19.471, 19.465, 14.648,\n 22.868, 14.332, 15.231, 45.757, 20.752,
14.399, 16.379, 21.738,\n 21.715, 22.075, 23.704, 17.829, 16.543, 5.783, 8.611,
25.459,\n 18.903, 21.176, 30.541, 6.225, 11.8 , 7.756, 32.779, 14.805,\n
12.905, 26.028, 17.566, 6.548, 23.136, 23.467, 23.049, 18.235,\n 13.466,
23.253, 24.606, 15.102, 9.834, 22.187, 22.751, 27.943,\n 14.75 , 18.998,
20.182, 14.533, 20.321, 17.646, 20.053, 42.898,\n 30.728, 20.178, 17.23 , 19.32
, 21.67 , 32.965, 46.448, 33.006,\n 20.386, 21.224, 8.953, 12.408, 14.492,
22.901, 18.32 , 21.243,\n 21.57 , 21.369, 17.585, 22.939, 35.383, 28.592,
12.088, 19.656,\n 22.178, 9.412, 21.546, 19.181, 20.802, 23.821, 23.633,
18.939,\n 25.699, 49.179, 10.076, 17.885, 14.133, 15.207, 16.443, 15.794,\n
20.76 , 21.045, 28.625, 22.002, 22.653, 24.464, 25.72 , 36.661,\n 18.997,
28.365, 19.326, 22.06 , 23.297, 24.018, 26.749, 20.681,\n 22.8 , 19.043,
15.843, 23.278, 13.949, 19.697, 21.174, 21.421,\n 23.475, 21.735, 20.785,
11.909, 23.5 , 23.744, 23.561, 14. ,\n 24.539, 21.009, 19.901, 31.493, 47.614,
14.727, 34.774, 22.541,\n 18.942, 19.865, 13.803, 15.368, 24.465, 29.201,
24.902, 31.276,\n 13.25 , 22.536, 16.951, 21.896, 27.656, 35.414, 27.887,
20.996,\n 14.406, 48.197, 17.718, 22.914, 20.766, 12.077, 21.225, 8.089,\n
16.271, 26.07 , 32.405, 10.103, 31.732, 16.419, 34.469, 20.389,\n 21.838,
22.095, 26.739, 23.249, 34.714, 14.513, 18.714, 14.324,\n 22.038, 21.071,
10.365, 14.024, 24.029, 29.443, 20.936, 15.145,\n 27.688, 18.361, 35.77 ,
22.815, 23.114, 16.217, 20.267, 10.435,\n 23.426, 36.497, 20.516, 17.128,
20.212, 41.596, 24.181, 24.675,\n 24.376, 17.557, 20.77 , 23.305, 21.462,
19.788, 20.775, 21.434,\n 14.453, 20.268, 16.559, 21.79 , 20.434, 18.152,
30.481, 15.084,\n 38.575, 28.108, 25.837, 21.331, 8.786, 21.472, 45.837,
23.215,\n 35.165, 16.049, 33.777, 19.792, 14.366, 9.033, 33.576, 22.561,\n
20.564, 19.466, 21.063, 7.993, 25.621, 17.055, 9.271, 21.66 ,\n 14.268, 9.404,
24.45 , 19.663, 19.164, 11.101, 24.287, 20.04 ,\n 24.132, 35.099, 20.862, 20.34
, 20.047, 27.726, 20.945, 26.596,\n 10.686, 31.635, 33.4 , 31.926, 31.781,
33.94 , 22.152, 28.832,\n 33.614, 17.784, 12.795, 34.185, 15.872, 26.526,
19.635, 20.245,\n 22.682, 30.147, 23.554, 26.455, 23.585, 14.369, 20.434,
20.917,\n 16.09 , 27.805, 43.686, 21.521, 45.255, 39.356, 34.093, 15.571,\n
30.398, 22.706, 46.186, 11.088, 11.596, 23.694, 22.837, 8.483,\n 24.991,
17.203, 21.288, 19.796, 17.207, 13.515, 12.735, 23.343,\n 28.352, 24.152,
20.976, 23.663, 15.552, 19.526, 31.283, 24.735,\n 7.728, 24.845, 15.172, 21.82
, 21.379, 12.46 , 21.985, 18.869,\n 22.055, 25.751, 22.82 , 20.856, 19.14 ,
22.066, 30.798, 23.451,\n 13.881, 34.004, 13.502, 22.127, 23.993, 7.994,
31.355, 12.705,\n 21.671,
20.215])&quot;},&quot;metadata&quot;:{}}]},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;#
Model Evaluation\n\nprint('R^2:',metrics.r2_score(y_train,y_pred))\nprint('MAE:',metrics.mean_absolute_error(y_train,y_pred))\nprint('MSE:',metrics.mean_squared_error(y_train,y_pred))\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(y_train,y_pred)))\n&quot;,&quot;execution_count&quot;:46,&quot;outputs&quot;:[{&quot;output_type&quot;:&quot;stream&quot;,&quot;text&quot;:&quot;R^2:
0.9755728148637813\nMAE: 0.8574406779661017\nMSE: 1.8386544915254244\nRMSE:
1.3559699449196594\n&quot;,&quot;name&quot;:&quot;stdout&quot;}]},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;#
Visualizing the differences between actual prices and predicted
values\nplt.scatter(y_train , y_pred)\nplt.xlabel('Prices')\nplt.ylabel('Predicted
prices')\nplt.title('Prices vs predicted
prices')\nplt.show()\n\n\n\n\n\n&quot;,&quot;execution_count&quot;:47,&quot;outputs&quot;:[{&quot;output_type&quot;:&quot;display_data&quot;,&quot;data&quot;:{&quot;text/plain&quot;:&quot;<Figure size 432x288 with 1 Axes>&quot;,&quot;image/png&quot;:&quot;\n&quot;},&quot;metadata&quot;:{&quot;needs_background&quot;:&quot;light&quot;}}]},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;#
Checking residuals \nplt.scatter(y_pred , y_train -
y_pred)\nplt.title(\&quot;Prediction vs
residuas\&quot;)\nplt.xlabel(\&quot;Predicted\&quot;)\nplt.ylabel('residuals')\nplt.show()&quot;,&quot;execution_count&quot;:49,&quot;outputs&quot;:[{&quot;output_type&quot;:&quot;display_data&quot;,&quot;data&quot;:{&quot;text/plain&quot;:&quot;<Figure size 432x288 with 1 Axes>&quot;,&quot;image/png&quot;:&quot;\n&quot;},&quot;metadata&quot;:{&quot;needs_background&quot;:&quot;light&quot;}}]},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;#
Predicting Test data with the model \ny_test_pred =
reg.predict(X_test)\ny_test_pred
&quot;,&quot;execution_count&quot;:50,&quot;outputs&quot;:[{&quot;output_type&quot;:&quot;execute_result&quot;,&quot;execution_count&quot;:50,&quot;data&quot;:{&quot;text/plain&quot;:&quot;array([17.633,
23.604, 18.882, 17.474, 47.198, 23.721, 34.669, 18.069,\n 15.134, 16.651, 28.975,
24.414, 20.537, 24.921, 21.47 , 13.361,\n 19.95 , 12.499, 13.127, 15.888,
7.519, 15.851, 20.206, 20.337,\n 20.598, 20.214, 16.177, 15.539, 22.447,
18.984, 15.012, 23.036,\n 32.314, 23.167, 14.844, 13.246, 31.934, 44.869, 23.91
, 23.206,\n 45.433, 29.027, 12.569, 29.946, 29.684, 20.286, 48.935, 19.696,\n
21.483, 23.062, 29.915, 22.624, 12.867, 26.896, 15.304, 20.301,\n 24.727,
30.623, 19.886, 29.472, 17.578, 20.779, 25.923, 20.387,\n 43.928, 26.843,
27.142, 8.377, 19.345, 22.045, 21.765, 20.483,\n 25.323, 26.099, 17.208,
33.918, 15.748, 23.303, 15.602, 21.849,\n 19.375, 15.848, 26.471, 20.439,
24.841, 20.53 , 33.687, 20.346,\n 21.02 , 47.182, 26.566, 48.309, 19.8 ,
47.751, 21.299, 21.152,\n 21.719, 28.028, 14.765, 19.567, 9.006, 21.018,
35.325, 15.281,\n 24.266, 20.54 , 37.15 , 32.051, 44.62 , 22.419, 22.272,
21.097,\n 18.675, 28.549, 35.753, 25.196, 49.012, 15.255, 11.471, 19.197,\n
21.099, 13.697, 23.592, 22.711, 18.994, 18.422, 49.001, 13.806,\n 14.453,
10.049, 46.643, 16.54 , 47.35 , 25.45 , 41.312, 20.079,\n 10.99 , 23.432, 20.36
, 20.249, 15.088, 11.793, 22.849, 29.219,\n 12.037, 19.547, 14.965, 15.457,
41.48 , 19.678, 26.79 ,
14.406])&quot;},&quot;metadata&quot;:{}}]},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;print('R^2:',metrics.r2_score(y_test,y_test_pred))\nprint('MAE:',metrics.mean_absolute_error(y_test,y_test_pred))\nprint('MSE:',metrics.mean_squared_error(y_test,y_test_pred))\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(y_test,y_test_pred)))\n&quot;,&quot;execution_count&quot;:51,&quot;outputs&quot;:[{&quot;output_type&quot;:&quot;stream&quot;,&quot;text&quot;:&quot;R^2:
0.8182402381176855\nMAE: 2.56075\nMSE: 18.979367473684206\nRMSE:
4.356531587591694\n&quot;,&quot;name&quot;:&quot;stdout&quot;}]},{&quot;metadata&quot;:{},&quot;cell_type&quot;:&quot;markdown&quot;,&quot;source&quot;:&quot;#
SVM Regressor\n## Training the
model\n&quot;},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;#
Creating scaled set to be used in model to improve the result\nfrom
sklearn.preprocessing import StandardScaler\n\nsc = StandardScaler()\nX_train =
sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n\n\n\n&quot;,&quot;execution_count&quot;:53,&quot;outputs&quot;:[]},{&quot;metadata&quot;:{},&quot;cell_type&quot;:&quot;markdown&quot;,&quot;source&quot;:&quot;##
Train the
model\n&quot;},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;#
Import SVM regressor \nfrom sklearn import svm\n\n# Create a svm regressor\nreg
= svm.SVR()\n\nreg.fit(X_train
,y_train)&quot;,&quot;execution_count&quot;:54,&quot;outputs&quot;:[{&quot;output_type&quot;:&quot;execute_result&quot;,&quot;execution_count&quot;:54,&quot;data&quot;:{&quot;text/plain&quot;:&quot;SVR()&quot;},&quot;metadata&quot;:{}}]},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;#
Model prediction on train set\ny_pred = reg.predict(X_train)\n&quot;,&quot;execution_count&quot;:55,&quot;outputs&quot;:[]},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;#
Model Evaluation\n\nprint('R^2:', metrics.r2_score(y_train , y_pred))\nprint('MAE:',metrics.mean_absolute_error(y_train,
y_pred))\nprint('MSE:',metrics.mean_squared_error(y_train,
y_pred))\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(y_train,
y_pred)))\n&quot;,&quot;execution_count&quot;:56,&quot;outputs&quot;:[{&quot;output_type&quot;:&quot;stream&quot;,&quot;text&quot;:&quot;R^2:
0.6419097248941195\nMAE: 2.9361501059460293\nMSE: 26.953752101332935\nRMSE:
5.191700309275655\n&quot;,&quot;name&quot;:&quot;stdout&quot;}]},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;#Visualizing
the differences between actual prices and predicted prices\nplt.scatter
(y_train , y_pred)\nplt.xlabel(\&quot;Prices\&quot;)\nplt.ylabel(\&quot;
Predicted Prices\&quot;)\nplt.title(\&quot;Prices vs predicted
Prices\&quot;)\nplt.show()\n\n&quot;,&quot;execution_count&quot;:57,&quot;outputs&quot;:[{&quot;output_type&quot;:&quot;display_data&quot;,&quot;data&quot;:{&quot;text/plain&quot;:&quot;<Figure size 432x288 with 1 Axes>&quot;,&quot;image/png&quot;:&quot;\n&quot;},&quot;metadata&quot;:{&quot;needs_background&quot;:&quot;light&quot;}}]},{&quot;metadata&quot;:{},&quot;cell_type&quot;:&quot;markdown&quot;,&quot;source&quot;:&quot;##
For test data\n&quot;},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;#
Predicting Test datawith the model \ny_test_pred =
reg.predict(X_test)\n&quot;,&quot;execution_count&quot;:58,&quot;outputs&quot;:[]},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;print('R^2:',metrics.r2_score(y_train,y_pred))\nprint('MAE:',metrics.mean_absolute_error(y_train,y_pred))\nprint('MSE:',metrics.mean_squared_error(y_train,y_pred))\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(y_train,y_pred)))\n&quot;,&quot;execution_count&quot;:59,&quot;outputs&quot;:[{&quot;output_type&quot;:&quot;stream&quot;,&quot;text&quot;:&quot;R^2:
0.6419097248941195\nMAE: 2.9361501059460293\nMSE: 26.953752101332935\nRMSE:
5.191700309275655\n&quot;,&quot;name&quot;:&quot;stdout&quot;}]},{&quot;metadata&quot;:{&quot;trusted&quot;:true},&quot;cell_type&quot;:&quot;code&quot;,&quot;source&quot;:&quot;&quot;,&quot;execution_count&quot;:null,&quot;outputs&quot;:[]}],&quot;metadata&quot;:{&quot;kernelspec&quot;:{&quot;name&quot;:&quot;python3&quot;,&quot;display_name&quot;:&quot;Python
3&quot;,&quot;language&quot;:&quot;python&quot;},&quot;language_info&quot;:{&quot;name&quot;:&quot;python&quot;,&quot;version&quot;:&quot;3.6.13&quot;,&quot;mimetype&quot;:&quot;text/x-python&quot;,&quot;codemirror_mode&quot;:{&quot;name&quot;:&quot;ipython&quot;,&quot;version&quot;:3},&quot;pygments_lexer&quot;:&quot;ipython3&quot;,&quot;nbconvert_exporter&quot;:&quot;python&quot;,&quot;file_extension&quot;:&quot;.py&quot;}},&quot;nbformat&quot;:4,&quot;nbformat_minor&quot;:5}<o:p></o:p></span></p>

</div>

</body>

</html>
